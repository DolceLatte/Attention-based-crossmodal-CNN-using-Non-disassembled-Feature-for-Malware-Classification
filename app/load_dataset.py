import pandas as pd
import os
import numpy as np
from tqdm import tqdm
import torch
from skimage import io
from torch.utils.data import TensorDataset, DataLoader
from collections import Counter
import torchvision.transforms as transforms
from sklearn.model_selection import train_test_split

class BuildDataLoader():
    def __init__(self,
                 train_fn_entropy=None,
                 train_fn_img=None,
                 fileListPath=None,
                 test_size=0.2,
                 random_state=91
                 ):
        x_entropy, y_entropy = self.load_pefile_data(fileListPath,train_fn_entropy)
        x_img, y_img = self.load_img_data(fileListPath,train_fn_img)

        X_train_entropy, X_test_entropy, y_train_entropy, y_test_entropy = train_test_split(x_entropy, y_entropy, stratify=y_entropy,
                                                            test_size=test_size, shuffle=True, random_state=random_state)
        X_train_img, X_test_img, y_train_img, y_test_img = train_test_split(x_img, y_img, stratify=y_img,
                                                            test_size=test_size, shuffle=True, random_state=random_state)

        assert y_test_img[-1] == y_test_entropy[-1]

        trn_loader_entropy = self.getLoader(X_train_entropy, y_train_entropy)
        val_loader_entropy = self.getLoader(X_test_entropy, y_test_entropy)
        trn_loader_img = self.getLoader(X_train_img, y_train_img)
        val_loader_img = self.getLoader(X_test_img, y_test_img)

        self.trn_loader = trn_loader_entropy,trn_loader_img
        self.val_loader = val_loader_entropy,val_loader_img

    def load_img_data(self, fileListPath, folder):
        transform = transforms.Compose([
            transforms.ToTensor(),
        ])
        unfoundedFiles = 0
        df = pd.read_csv(fileListPath, sep=',')
        # numpy array, 2D,
        malware_name_label = df.values
        #malware_name_label = df.head(10).values
        mixed_malware_name_label = self.Shuffle(malware_name_label)

        dirTargetHaar2D = "/".join([os.getcwd(), folder])
        filesLen = len(mixed_malware_name_label)
        data_with_padding = np.zeros((filesLen, 64, 784))
        y_label_number = np.zeros(filesLen)
        index = 0

        for entryIndex in tqdm(range(len(mixed_malware_name_label))):
            fetched_name_label = mixed_malware_name_label[entryIndex]
            name_with_extension = fetched_name_label[0] + '.txt.png'
            pathTargetHaar2D = os.path.join(dirTargetHaar2D, name_with_extension)
            try:
                data_non_pad = io.imread(fname=pathTargetHaar2D, as_gray=True)
                data_non_pad = data_non_pad.T
                data_non_pad = transform(data_non_pad)
                data_non_pad = data_non_pad.reshape(64, -1)
                data_with_padding[index] = data_non_pad

                y_label_number[index] = mixed_malware_name_label[entryIndex][1] - 1
                index += 1

            except FileNotFoundError:
                print("File does not exist: " + name_with_extension)
                unfoundedFiles += 1

        if unfoundedFiles != 0:
            print('delete')
            data_with_padding = data_with_padding[: filesLen - unfoundedFiles]
            y_label_number = y_label_number[:filesLen - unfoundedFiles]

        x = data_with_padding
        y = y_label_number
        print(Counter(y))

        return torch.tensor(x, dtype=torch.float32), torch.tensor(y, dtype=torch.int64)


    def load_pefile_data(self,fileListPath, folder, w=14, MaxChunkLen=3600):
        unfoundedFiles = 0
        df = pd.read_csv(fileListPath, sep=',')
        # numpy array, 2D,
        malware_name_label = df.values
        #malware_name_label = df.head(10).values
        mixed_malware_name_label = self.Shuffle(malware_name_label)

        dirTargetHaar2D = "/".join([os.getcwd(), folder])
        filesLen = len(mixed_malware_name_label)
        data_with_padding = np.zeros((filesLen, MaxChunkLen, w))
        y_label_number = np.zeros(filesLen)
        index = 0

        for entryIndex in tqdm(range(len(mixed_malware_name_label))):
            fetched_name_label = mixed_malware_name_label[entryIndex]
            name_with_extension = fetched_name_label[0] + '.csv'
            pathTargetHaar2D = os.path.join(dirTargetHaar2D, name_with_extension)
            try:
                df_haar = pd.read_csv(pathTargetHaar2D, sep=',', header=None, index_col=None)
                data_non_pad = df_haar.values[:, :w]

                if len(data_non_pad) < MaxChunkLen:
                    tp = MaxChunkLen - len(data_non_pad)
                    padArray = np.zeros((tp, w))
                    data_non_pad = np.vstack((data_non_pad, padArray))

                else:
                    data_non_pad = data_non_pad[:MaxChunkLen]
                data_with_padding[index] = data_non_pad

                y_label_number[index] = mixed_malware_name_label[entryIndex][1] - 1
                index += 1

            except FileNotFoundError:
                print("File does not exist: " + name_with_extension)
                unfoundedFiles += 1

        if unfoundedFiles != 0:
            print('delete')
            data_with_padding = data_with_padding[: filesLen - unfoundedFiles]
            y_label_number = y_label_number[:filesLen - unfoundedFiles]

        x = np.transpose(data_with_padding, (0, 2, 1))
        y = y_label_number
        print(Counter(y))
        return torch.tensor(x, dtype=torch.float32), torch.tensor(y, dtype=torch.int64)

    def Shuffle(self,array):
        index = np.arange(10868)
        np.random.seed(91)
        np.random.shuffle(index)
        return array[index]

    def getLoader(self,X, y):
        set = TensorDataset(X, y)
        loader = DataLoader(set, batch_size=128, shuffle=True)
        return loader

if __name__ == '__main__':
    fileListPath = "../dataset/trainLabels.csv"
    img_folder = "../dataset/malware_img"
    entropy_folder = "../dataset/malware_entropy"
    loader = BuildDataLoader(entropy_folder,img_folder,fileListPath)
    trn_loader = loader.trn_loader
    num_batches = len(list(trn_loader))

    for i, (x,y) in enumerate(trn_loader):
        print(x)