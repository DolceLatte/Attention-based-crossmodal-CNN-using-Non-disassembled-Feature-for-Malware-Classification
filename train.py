import argparse

from app.model.crossmodal import CrossmodalNet
import torch.nn as nn
import torch.optim as optim
from app.load_dataset import BuildDataLoader
from app.trainer import trainer

def define_argparser():
    p = argparse.ArgumentParser()
    config = p.parse_args()
    return config

def get_model():
    return CrossmodalNet()

def get_crit():
    criterion = nn.CrossEntropyLoss()
    return criterion

def get_optimizer(model):
    optimizer = optim.Adam(model.parameters(), lr=0.00015)
    return optimizer

def main():
    fileListPath = "dataset/trainLabels.csv"
    img_folder = "dataset/malware_img"
    entropy_folder = "dataset/malware_entropy"

    loader = BuildDataLoader(entropy_folder,img_folder,fileListPath)
    model = get_model()
    criterion = get_crit()
    optimizer = get_optimizer(model)
    num_epochs = 10

    model_trainer = trainer(model,loader.trn_loader,  loader.val_loader)
    model_trainer.train(num_epochs,
                        criterion,
                        optimizer)


if __name__ == '__main__':
    main()