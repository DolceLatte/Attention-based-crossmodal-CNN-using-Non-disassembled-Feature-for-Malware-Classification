import argparse

from app.model.crossmodal import CrossmodalNet
import torch.nn as nn
import torch.optim as optim
from app.make_dataset import BuildDataLoader
from app.trainer import trainer
import app
import pandas as pd
import torch
import matplotlib.pyplot as plt
import seaborn as sns

def define_argparser():
    p = argparse.ArgumentParser()
    config = p.parse_args()
    return config

def get_model():
    return CrossmodalNet()

def get_crit():
    criterion = nn.CrossEntropyLoss()
    return criterion

def get_optimizer(model):
    optimizer = optim.Adam(model.parameters(), lr=1e-4)
    return optimizer

def check_attention(model,img_folder,entropy_folder,flistpath,save_path):
    flist = pd.read_csv(flistpath, sep=',').values

    X_img, y_img = app.make_dataset.load_img_data(fileListPath=flistpath,folder=img_folder)
    X, y, mask = app.make_dataset.load_pefile_data(fileListPath=flistpath,folder=entropy_folder, w=14, MaxChunkLen=3600)

    model.to('cpu')
    model.eval()
    with torch.no_grad():

        for i, (unpack_e, mask, _ , unpack_i, _) in enumerate(zip(X, mask, y ,X_img, y_img)):
            x = torch.tensor(unpack_e,dtype=torch.float32).unsqueeze(0)
            mask = torch.tensor(mask,dtype=torch.float32).unsqueeze(0)
            x_img = torch.tensor(unpack_i,dtype=torch.float32).unsqueeze(0)
            _, attn_score = model(x, x_img, mask)

            score = attn_score.squeeze(0)
            mask = mask.squeeze(0)
            mask = mask.squeeze(-1)
            masklen = int(sum(mask).item())
            score = score[:masklen,:]

            sns.heatmap(score, cmap='Blues')
            # plt.show()
            plt.savefig(save_path+'/{}.png'.format(flist[i][0]))
            plt.close()


def main():
    fileListPath = "dataset/trainLabels.csv"

    #train dataset path
    img_folder = "dataset/malware_img"
    entropy_folder = "dataset/malware_entropy"

    #check attention parameter
    flistpath = "check_attention/acy.csv"
    save_path = "check_attention/ACY_weight_image_entropy"


    loader = BuildDataLoader(entropy_folder,img_folder,fileListPath)
    model = get_model()
    criterion = get_crit()
    optimizer = get_optimizer(model)
    num_epochs = 11

    model_trainer = trainer(model,loader.trn_loader,  loader.val_loader)
    model_trainer.train(num_epochs,
                        criterion,
                        optimizer)

    check_attention(model_trainer.model, img_folder, entropy_folder, flistpath,save_path)

if __name__ == '__main__':
    main()